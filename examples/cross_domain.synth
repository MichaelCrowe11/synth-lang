// SYNTH Cross-Domain Computing Demo
// Shows how SYNTH bridges different domains like healthcare and finance

// Healthcare domain types (conceptual)
function analyze_patient_data(symptoms: string, age: int) -> uncertain<string> {
    // Convert symptoms to medical embedding space
    let symptom_vector = embed("medical: " + symptoms);
    
    // Compare against known conditions
    let flu_pattern = embed("medical: fever cough headache fatigue");
    let cold_pattern = embed("medical: runny nose sneezing sore throat");
    let allergy_pattern = embed("medical: sneezing watery eyes itchy");
    
    // Calculate similarities
    let flu_score = symptom_vector ~~ flu_pattern;
    let cold_score = symptom_vector ~~ cold_pattern;
    let allergy_score = symptom_vector ~~ allergy_pattern;
    
    // Age-based risk adjustment
    let risk_multiplier = 1.0;
    if age > 65 {
        risk_multiplier = 1.5;
    }
    
    // Determine most likely condition
    if flu_score > cold_score && flu_score > allergy_score {
        return "flu" @ (flu_score * risk_multiplier);
    } else if cold_score > allergy_score {
        return "cold" @ cold_score;
    } else {
        return "allergy" @ allergy_score;
    }
}

// Finance domain bridge function
function assess_insurance_risk(diagnosis: uncertain<string>, income: int) -> uncertain<int> {
    // Extract diagnosis and confidence
    let condition = diagnosis.value;
    let medical_confidence = diagnosis.confidence;
    
    // Base risk assessment
    let base_risk = 1;
    if condition == "flu" {
        base_risk = 2;
    } else if condition == "cold" {
        base_risk = 1;
    } else {
        base_risk = 1; // allergy
    }
    
    // Income-based adjustment
    let financial_factor = 1.0;
    if income < 30000 {
        financial_factor = 1.3; // Higher risk for lower income
    } else if income > 100000 {
        financial_factor = 0.8; // Lower risk for higher income
    }
    
    let final_risk = base_risk * financial_factor;
    let confidence = medical_confidence * 0.9; // Slightly reduced confidence in cross-domain inference
    
    return final_risk @ confidence;
}

// AI-powered explanation generator
function explain_assessment(diagnosis: uncertain<string>, risk: uncertain<int>) -> string {
    let explanation_prompt = "Explain this medical assessment and insurance risk in plain language: " +
        "Diagnosis: " + diagnosis.value + " (confidence: " + diagnosis.confidence + "), " +
        "Risk level: " + risk.value + " (confidence: " + risk.confidence + ")";
    
    return ai.generate(explanation_prompt);
}

function main() {
    // Example patient cases
    let patients = [
        { symptoms: "fever and cough", age: 45, income: 50000 },
        { symptoms: "runny nose and sneezing", age: 72, income: 25000 },
        { symptoms: "itchy eyes and sneezing", age: 30, income: 80000 }
    ];
    
    for patient in patients {
        console.log("=== Patient Analysis ===");
        console.log("Symptoms:", patient.symptoms);
        console.log("Age:", patient.age);
        console.log("Income:", patient.income);
        
        // Medical analysis
        let diagnosis = analyze_patient_data(patient.symptoms, patient.age);
        console.log("Diagnosis:", diagnosis);
        
        // Financial risk assessment
        let risk = assess_insurance_risk(diagnosis, patient.income);
        console.log("Insurance Risk Level:", risk);
        
        // AI explanation
        let explanation = explain_assessment(diagnosis, risk);
        console.log("Explanation:", explanation);
        
        console.log("");
    }
    
    return 0;
}